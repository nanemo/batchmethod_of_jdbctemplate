package com.nanemo.repository;

import com.nanemo.entity.Person;
import com.nanemo.service.PersonService;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.annotation.Lazy;
import org.springframework.jdbc.core.BatchPreparedStatementSetter;
import org.springframework.jdbc.core.BeanPropertyRowMapper;
import org.springframework.jdbc.core.JdbcTemplate;
import org.springframework.stereotype.Service;

import java.sql.PreparedStatement;
import java.sql.SQLException;
import java.util.List;

@Service
public class PersonRepository {

    private final JdbcTemplate jdbcTemplate;

    @Autowired
    public PersonRepository(JdbcTemplate jdbcTemplate) {
        this.jdbcTemplate = jdbcTemplate;
    }

    public List<Person> getAllPerson() {
        return jdbcTemplate.query("SELECT * FROM Person", new BeanPropertyRowMapper<>(Person.class));
    }

    public void addPeopleWithBatchMethod(List<Person> people) {

        jdbcTemplate.batchUpdate("INSERT INTO Person (name, email, age, address) VALUES (?,?,?,?)",
                new BatchPreparedStatementSetter() {
                    @Override
                    public void setValues(PreparedStatement ps, int i) throws SQLException {
                        ps.setString(1, people.get(i).getName());
                        ps.setString(2, people.get(i).getEmail());
                        ps.setInt(3, people.get(i).getAge());
                        ps.setString(4, people.get(i).getAddress());
                    }

                    @Override
                    public int getBatchSize() {
                        return people.size();
                    }
                });
    }

    public void addPeopleWithSimpleUpdateMethod(List<Person> people) {

        people.forEach(person -> jdbcTemplate.update("INSERT INTO Person (name, email, age, address) VALUES (?,?,?,?)",
                person.getName(), person.getEmail(), person.getAge(), person.getAddress()));
    }

    public void dropAndCreatePersonTable() {
        jdbcTemplate.update("DROP TABLE IF EXISTS Person; " + "CREATE TABLE Person(" +
                "    person_id Integer GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY," +
                "    name      VARCHAR(60)," +
                "    email     VARCHAR(60)," +
                "    age       SMALLINT," +
                "    address   VARCHAR(100))");
    }

}
